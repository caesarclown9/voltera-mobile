#!/usr/bin/env node

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Supabase
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/check-supabase.js
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: join(__dirname, '..', '.env') });

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è VITE_SUPABASE_URL –∏–ª–∏ VITE_SUPABASE_ANON_KEY');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkDatabase() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase...\n');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞—Ü–∏–∏
    const { data: locations, error: locError } = await supabase
      .from('locations')
      .select('*')
      .limit(10);

    if (locError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–∫–∞—Ü–∏–π:', locError);
    } else {
      console.log(`‚úÖ –õ–æ–∫–∞—Ü–∏–∏: ${locations?.length || 0} –∑–∞–ø–∏—Å–µ–π`);
      if (locations && locations.length > 0) {
        console.log('   –ü—Ä–∏–º–µ—Ä—ã:');
        locations.slice(0, 3).forEach(loc => {
          console.log(`   - ${loc.name} (${loc.city})`);
        });
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω—Ü–∏–∏
    const { data: stations, error: stError } = await supabase
      .from('stations')
      .select('*')
      .limit(10);

    if (stError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞–Ω—Ü–∏–π:', stError);
    } else {
      console.log(`\n‚úÖ –°—Ç–∞–Ω—Ü–∏–∏: ${stations?.length || 0} –∑–∞–ø–∏—Å–µ–π`);
      if (stations && stations.length > 0) {
        console.log('   –ü—Ä–∏–º–µ—Ä—ã:');
        stations.slice(0, 3).forEach(st => {
          console.log(`   - ${st.serial_number} (${st.model}, ${st.power_capacity}–∫–í—Ç)`);
        });
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã
    const { data: connectors, error: conError } = await supabase
      .from('connectors')
      .select('*')
      .limit(10);

    if (conError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤:', conError);
    } else {
      console.log(`\n‚úÖ –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã: ${connectors?.length || 0} –∑–∞–ø–∏—Å–µ–π`);
      if (connectors && connectors.length > 0) {
        const types = [...new Set(connectors.map(c => c.connector_type))];
        console.log(`   –¢–∏–ø—ã: ${types.join(', ')}`);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { data: clients, error: clError } = await supabase
      .from('clients')
      .select('*')
      .limit(10);

    if (clError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤:', clError);
    } else {
      console.log(`\n‚úÖ –ö–ª–∏–µ–Ω—Ç—ã: ${clients?.length || 0} –∑–∞–ø–∏—Å–µ–π`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏–∏ –∑–∞—Ä—è–¥–∫–∏
    const { data: sessions, error: sesError } = await supabase
      .from('charging_sessions')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(10);

    if (sesError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–π:', sesError);
    } else {
      console.log(`\n‚úÖ –°–µ—Å—Å–∏–∏ –∑–∞—Ä—è–¥–∫–∏: ${sessions?.length || 0} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö`);
      if (sessions && sessions.length > 0) {
        const statuses = [...new Set(sessions.map(s => s.status))];
        console.log(`   –°—Ç–∞—Ç—É—Å—ã: ${statuses.join(', ')}`);
      }
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');

    const { count: locCount } = await supabase
      .from('locations')
      .select('*', { count: 'exact', head: true });

    const { count: stCount } = await supabase
      .from('stations')
      .select('*', { count: 'exact', head: true });

    const { count: conCount } = await supabase
      .from('connectors')
      .select('*', { count: 'exact', head: true });

    const { count: clCount } = await supabase
      .from('clients')
      .select('*', { count: 'exact', head: true });

    const { count: sesCount } = await supabase
      .from('charging_sessions')
      .select('*', { count: 'exact', head: true });

    console.log(`   –õ–æ–∫–∞—Ü–∏–∏: ${locCount || 0}`);
    console.log(`   –°—Ç–∞–Ω—Ü–∏–∏: ${stCount || 0}`);
    console.log(`   –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã: ${conCount || 0}`);
    console.log(`   –ö–ª–∏–µ–Ω—Ç—ã: ${clCount || 0}`);
    console.log(`   –°–µ—Å—Å–∏–∏: ${sesCount || 0}`);

    console.log('\n‚ú® –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');

  } catch (error) {
    console.error('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkDatabase();