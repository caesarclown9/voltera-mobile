import { useState } from "react";
import { useSignIn } from "../hooks/useAuth";
import { useAuthStore } from "../store";
import { authService } from "../services/authService";

interface SignInFormProps {
  onSuccess: () => void;
  onSwitchToSignUp: () => void;
}

export function SignInForm({ onSuccess, onSwitchToSignUp }: SignInFormProps) {
  const [loginField, setLoginField] = useState(""); // –ú–æ–∂–µ—Ç –±—ã—Ç—å email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω
  const [password, setPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const [isRestoring, setIsRestoring] = useState(false);
  const [canRestore, setCanRestore] = useState(false);
  const [restoreInfo, setRestoreInfo] = useState<string | null>(null);

  const signInMutation = useSignIn();
  const { login } = useAuthStore();

  const isPhoneNumber = (value: string) => {
    // –†–∞–∑—Ä–µ—à–∞–µ–º –≤–≤–æ–¥ –±–µ–∑ '+' ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–∏—Ñ—Ä—ã 9-15
    const digits = value.replace(/\D/g, "");
    return digits.length >= 9 && digits.length <= 15;
  };

  const isEmail = (value: string) => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(value);
  };

  const isValidLogin = isPhoneNumber(loginField) || isEmail(loginField);
  const isValid = isValidLogin && password.length >= 6;

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!isValid) {
      return;
    }

    try {
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∫ —Ñ–æ—Ä–º–∞—Ç—É +996XXXXXXXXX, –µ—Å–ª–∏ –≤–≤–µ–¥—ë–Ω —Ç–µ–ª–µ—Ñ–æ–Ω
      const digits = loginField.replace(/\D/g, "");
      const normalizedPhone = digits
        ? digits.length === 9 && !digits.startsWith("996")
          ? `+996${digits}`
          : digits.startsWith("996")
            ? `+${digits}`
            : digits.startsWith("0") && digits.length === 10
              ? `+996${digits.substring(1)}`
              : `+${digits}`
        : "";

      const loginData = isPhoneNumber(loginField)
        ? { phone: normalizedPhone, password }
        : { email: loginField, password };

      const result = await signInMutation.mutateAsync(loginData);

      if (result.success) {
        onSuccess();
      }
    } catch (error) {
      // –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ‚Äî –ø–æ–∫–∞–∑ –±–ª–æ–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
      const message = (error as Error)?.message || "";
      if (/–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω/i.test(message)) {
        // –°–∫—Ä—ã–≤–∞–µ–º –∫—Ä–∞—Å–Ω—É—é –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ –¥–∞–ª—å—à–µ –±—É–¥–µ—Ç –±–ª–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        try {
          signInMutation.reset();
        } catch {
          // Ignore reset errors
        }
        setCanRestore(true);
        setRestoreInfo(
          "–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —É–¥–∞–ª–µ–Ω–∏—è. –í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø.",
        );
      }
    }
  };

  const handleRestore = async () => {
    try {
      setIsRestoring(true);
      const { supabase } = await import("@/shared/config/supabase");
      const {
        data: { user },
      } = await supabase.auth.getUser();
      if (!user) {
        setRestoreInfo(
          "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –≤—Ö–æ–¥–∞.",
        );
        setIsRestoring(false);
        return;
      }
      const { error: rpcErr } = await supabase.rpc("restore_account");
      if (rpcErr) {
        const { error: updErr } = await supabase
          .from("clients")
          .update({ status: "active", delete_requested_at: null })
          .eq("id", user.id);
        if (updErr) throw updErr;
      }
      // –ü—ã—Ç–∞–µ–º—Å—è —Å—Ä–∞–∑—É –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
      const client = await authService.getCurrentUser();
      if (client) {
        // –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—É—é –æ—à–∏–±–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        try {
          signInMutation.reset();
        } catch {
          // Ignore reset errors
        }
        const unifiedUser = {
          id: client.id,
          email: client.email,
          phone: client.phone || null,
          name: client.name || "User",
          balance: client.balance || 0,
          status: "active" as const,
          favoriteStations: [],
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString(),
        };
        login(unifiedUser);
        setCanRestore(false);
        setRestoreInfo("–ê–∫–∫–∞—É–Ω—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
        onSuccess();
        return;
      }
      // –î–ª—è —Ä–µ–¥–∫–æ–≥–æ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç–∞ –µ—â—ë –Ω–µ—Ç ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ —É–±–∏—Ä–∞–µ–º –æ—à–∏–±–∫—É –≤—Ö–æ–¥–∞
      try {
        signInMutation.reset();
      } catch {
        // Ignore reset errors
      }
      setRestoreInfo("–ê–∫–∫–∞—É–Ω—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∏ –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.");
      setCanRestore(false);
    } catch (e) {
      const errorMessage = e instanceof Error ? e.message : "–æ—à–∏–±–∫–∞";
      setRestoreInfo("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: " + errorMessage);
    } finally {
      setIsRestoring(false);
    }
  };

  return (
    <div className="bg-white rounded-2xl shadow-xl p-8 max-w-md mx-auto">
      <div className="text-center mb-8">
        <div className="flex items-center justify-center mx-auto mb-4">
          <img
            src="/icons/evpower-logo-horizontal.png"
            alt="EvPower"
            className="h-16 w-auto"
          />
        </div>
        <h2 className="text-2xl font-bold text-gray-900 mb-2">
          –í—Ö–æ–¥ –≤ EvPower
        </h2>
        <p className="text-gray-600">–í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç</p>
      </div>

      <form onSubmit={handleSubmit} className="space-y-5">
        <div>
          <label
            htmlFor="signin-login"
            className="block text-sm font-medium text-gray-700 mb-2"
          >
            –ù–æ–º–µ—Ä/–ü–æ—á—Ç–∞
          </label>
          <input
            type="text"
            id="signin-login"
            value={loginField}
            onChange={(e) => setLoginField(e.target.value)}
            className={`w-full px-4 py-3 rounded-xl border ${
              loginField && !isValidLogin
                ? "border-red-300 focus:border-red-500 focus:ring-red-500"
                : "border-gray-300 focus:border-green-500 focus:ring-green-500"
            } focus:outline-none focus:ring-2 text-gray-900 placeholder-gray-400`}
            placeholder="+996 XXX XXX XXX –∏–ª–∏ email@example.com"
            required
          />
          {loginField && !isValidLogin && (
            <p className="mt-1 text-sm text-red-600">
              –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ email
            </p>
          )}
        </div>

        <div>
          <label
            htmlFor="signin-password"
            className="block text-sm font-medium text-gray-700 mb-2"
          >
            –ü–∞—Ä–æ–ª—å
          </label>
          <div className="relative">
            <input
              type={showPassword ? "text" : "password"}
              id="signin-password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className={`w-full px-4 py-3 rounded-xl border ${
                password && password.length < 6
                  ? "border-red-300 focus:border-red-500 focus:ring-red-500"
                  : "border-gray-300 focus:border-green-500 focus:ring-green-500"
              } focus:outline-none focus:ring-2 text-gray-900 placeholder-gray-400 pr-12`}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
              minLength={6}
              required
            />
            <button
              type="button"
              onClick={() => setShowPassword(!showPassword)}
              className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 hover:text-gray-700"
            >
              {showPassword ? "üëÅÔ∏è" : "üëÅÔ∏è‚Äçüó®Ô∏è"}
            </button>
          </div>
          {password && password.length < 6 && (
            <p className="mt-1 text-sm text-red-600">
              –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤
            </p>
          )}
        </div>

        <button
          type="submit"
          className="w-full bg-gradient-to-r from-green-500 to-cyan-500 text-white py-3 rounded-xl font-semibold hover:shadow-lg transition-all disabled:opacity-50 disabled:cursor-not-allowed"
          disabled={!isValid || signInMutation.isPending}
        >
          {signInMutation.isPending ? (
            <div className="flex items-center justify-center">
              <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
              –í—Ö–æ–¥...
            </div>
          ) : (
            "–í–æ–π—Ç–∏"
          )}
        </button>
      </form>

      <div className="mt-4 text-center">
        <p className="text-sm text-gray-500">
          –ù–µ—Ç —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏?{" "}
          <button
            type="button"
            onClick={onSwitchToSignUp}
            className="text-cyan-600 hover:text-cyan-700 font-medium underline"
          >
            –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
          </button>
        </p>
      </div>

      {signInMutation.error && !canRestore && (
        <div className="mt-4 p-3 bg-red-50 border border-red-200 rounded-md">
          <p className="text-sm text-red-600">
            –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.
          </p>
        </div>
      )}

      {canRestore && (
        <div className="mt-4 p-3 bg-amber-50 border border-amber-200 rounded-md">
          <p className="text-sm text-amber-800 mb-3">{restoreInfo}</p>
          <button
            type="button"
            onClick={handleRestore}
            disabled={isRestoring}
            className="w-full bg-cyan-600 text-white py-2 rounded-lg font-semibold hover:bg-cyan-700 disabled:opacity-50"
          >
            {isRestoring ? "–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º‚Ä¶" : "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø"}
          </button>
        </div>
      )}
    </div>
  );
}
