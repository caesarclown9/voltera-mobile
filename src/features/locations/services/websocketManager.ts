import type {
  WebSocketMessage,
  WebSocketLocationUpdate,
  WebSocketStationUpdate
} from '../../../api/types';
import { supabase } from '../../../shared/config/supabase';

type WebSocketUpdateHandler = (data: WebSocketLocationUpdate | WebSocketStationUpdate) => void;

export class WebSocketManager {
  private static instance: WebSocketManager;
  private ws: WebSocket | null = null;
  private subscriptions = new Set<string>();
  private handlers = new Set<WebSocketUpdateHandler>();
  private reconnectTimer: NodeJS.Timeout | null = null;
  private reconnectAttempts = 0;
  private maxReconnectAttempts = 5;
  private clientId: string | null = null;

  private constructor() {}

  static getInstance(): WebSocketManager {
    if (!WebSocketManager.instance) {
      WebSocketManager.instance = new WebSocketManager();
    }
    return WebSocketManager.instance;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ WebSocket URL —Å client_id
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç null –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
   */
  private async getWebSocketUrl(): Promise<string | null> {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase
    const { data: { user }, error } = await supabase.auth.getUser();

    if (error || !user?.id) {
      // WebSocket —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      return null;
    }

    this.clientId = user.id;

    const baseUrl = import.meta.env.VITE_WEBSOCKET_URL
      ? `${import.meta.env.VITE_WEBSOCKET_URL}/api/v1/ws/locations`
      : 'wss://ocpp.evpower.kg/api/v1/ws/locations';

    // –î–æ–±–∞–≤–ª—è–µ–º client_id
    const finalUrl = `${baseUrl}?client_id=${this.clientId}`;
    return finalUrl;
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É
   * –¢—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async connect(): Promise<void> {
    if (this.ws && this.ws.readyState === WebSocket.OPEN) {
      return; // –£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
    }

    try {
      const wsUrl = await this.getWebSocketUrl();

      if (!wsUrl) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - WebSocket –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        return;
      }

      this.ws = new WebSocket(wsUrl);

      this.ws.onopen = () => {
        console.log('üîó WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
        this.reconnectAttempts = 0;
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        this.subscriptions.forEach(channel => {
          this.sendSubscription('subscribe', channel);
        });
      };

      this.ws.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data);
          this.handleMessage(data);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
      };

      this.ws.onclose = (event) => {
        console.log('üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω:', event.code, event.reason);
        this.handleDisconnect();
      };

      this.ws.onerror = (error) => {
        console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
      };

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
      this.handleDisconnect();
    }
  }

  /**
   * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket —Å–µ—Ä–≤–µ—Ä–∞
   */
  disconnect(): void {
    if (this.reconnectTimer) {
      clearTimeout(this.reconnectTimer);
      this.reconnectTimer = null;
    }

    if (this.ws) {
      this.ws.close();
      this.ws = null;
    }

    this.subscriptions.clear();
    console.log('WebSocket –æ—Ç–∫–ª—é—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
  }

  /**
   * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
   */
  subscribe(channel: string): void {
    this.subscriptions.add(channel);
    
    if (this.ws && this.ws.readyState === WebSocket.OPEN) {
      this.sendSubscription('subscribe', channel);
    }
  }

  /**
   * –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –∫–∞–Ω–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
   */
  unsubscribe(channel: string): void {
    this.subscriptions.delete(channel);
    
    if (this.ws && this.ws.readyState === WebSocket.OPEN) {
      this.sendSubscription('unsubscribe', channel);
    }
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
   */
  addUpdateHandler(handler: WebSocketUpdateHandler): void {
    this.handlers.add(handler);
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
   */
  removeUpdateHandler(handler: WebSocketUpdateHandler): void {
    this.handlers.delete(handler);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  isConnected(): boolean {
    return this.ws !== null && this.ws.readyState === WebSocket.OPEN;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
   */
  getSubscriptions(): string[] {
    return Array.from(this.subscriptions);
  }

  private sendSubscription(action: 'subscribe' | 'unsubscribe', channel: string): void {
    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
      return;
    }

    const message: WebSocketMessage = { type: action, data: { channel } };

    try {
      this.ws.send(JSON.stringify(message));
      console.log(`üì° ${action} on channel:`, channel);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ${action} –¥–ª—è –∫–∞–Ω–∞–ª–∞ ${channel}:`, error);
    }
  }

  private handleMessage(data: any): void {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–π –∏ —Å—Ç–∞–Ω—Ü–∏–π
    if (data.type === 'location_status_update' || data.type === 'station_status_update') {
      this.handlers.forEach(handler => {
        try {
          handler(data);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
      });
    }
  }

  private handleDisconnect(): void {
    if (this.reconnectAttempts < this.maxReconnectAttempts) {
      const delay = Math.min(1000 * Math.pow(2, this.reconnectAttempts), 30000); // Exponential backoff —Å –º–∞–∫—Å–∏–º—É–º–æ–º 30 —Å–µ–∫
      
      console.log(`üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${delay/1000} —Å–µ–∫ (–ø–æ–ø—ã—Ç–∫–∞ ${this.reconnectAttempts + 1}/${this.maxReconnectAttempts})`);
      
      this.reconnectTimer = setTimeout(() => {
        this.reconnectAttempts++;
        this.connect();
      }, delay);
    } else {
      console.error('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
    }
  }
}

export const websocketManager = WebSocketManager.getInstance();